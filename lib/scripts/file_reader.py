import os
from openai import AzureOpenAI
from tqdm import tqdm  # Import tqdm for the progress bar

def read_file_to_variable(file_path):
    # Get the size of the file for tqdm progress bar
    file_size = os.path.getsize(file_path)
    
    # Initialize tqdm with the file size
    with tqdm(total=file_size, unit='B', unit_scale=True, desc=f"Reading file {file_path}") as pbar:
        # Read the content from the file
        with open(file_path, "r") as file:
            file_content = file.read()
            pbar.update(file_size)  # Update the progress bar to show completion

    return file_content

def read_files_in_folder(folder_path):
    file_contents = {}
    
    # Iterate through all files in the folder
    for file_name in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file_name)
        
        # Check if it's a file (not a directory)
        if os.path.isfile(file_path):
            # Read content from each file and store in a dictionary with file name as key
            file_contents[file_name] = read_file_to_variable(file_path)

    return file_contents

# Example usage with a folder path
folder_path = "assets/files/Job Descriptions.txt"

# Read content from all files in the folder
file_contents = read_files_in_folder(folder_path)

# Print the content of each file (for demonstration purposes)
# for file_name, content in file_contents.items():
#     print(f"Content of file {file_name}:\n{content}")

client = AzureOpenAI(
    api_key="b8e6ac2cfda244dd848a823511255a0b",
    azure_endpoint="https://hackathonservice.openai.azure.com/",
    api_version="2023-05-15"
)

# Example usage with a folder path and different variables for each file
responses = {}

# Iterate through each file content and interact with the OpenAI chatbot
for file_name, content in file_contents.items():
    response = client.chat.completions.create(
        model="gpt-35-turbo",
        messages=[
            {"role": "system", "content": "You take text files and give a one sentence summary"},
            {"role": "user", "content": f"Read this file and summarise it {content}"},
            {"role": "assistant", "content": f"Send the summary for file {file_name}"},
        ]
    )
    responses[file_name] = response.choices[0].message.content

# Print the content generated by the OpenAI chatbot for each file
for file_name, response_content in responses.items():
    print(f"Response from chatbot for file {file_name}:\n{response_content}")
